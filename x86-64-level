#!/usr/bin/env sh
set -u

#' Get the x86-64 Microarchitecture Level on the Current Machine
#'
#' Queries the CPU information to infer which level of x86-64
#' microarchitecture is supported by the CPU on the current machine,
#' i.e. x86-64-v1, x86-64-v2, x86-64-v3, or x86-64-v4.
#'
#' Usage:
#' x86-64-level
#'
#' Options:
#'   --help            Show this help
#'   --version         Show the version of this tool
#'   --verbose         Explain the identified level
#'   --assert=<level>  Assert that CPU supports x86-64-v<level> with
#'                     exit code 0 is supported, otherwise 1
#'
#' Examples:
#' $ x86-64-level
#' 3
#'
#' $ level=$(x86-64-level)
#' $ echo "x86-64-v${level}"
#' x86-64-v3
#'
#' $ x86-64-level --verbose
#' Identified x86-64-v3, because x86-64-v4 requires 'avx512f', which is
#' not supported by this CPU [Intel(R) Core(TM) i7-8650U CPU @ 1.90GHz]
#' 3
#'
#' $ cat /proc/cpuinfo | x86-64-level -
#' 3
#'
#' $ x86-64-level --assert=2
#' $ echo $?
#' 0
#'
#' $ x86-64-level --assert=4
#' The CPU [Intel(R) Core(TM) i7-8650U CPU @ 1.90GHz] on this host ('dev2')
#' supports x86-64-v3, which is less than the required x86-64-v4
#' $ echo $?
#' 1
#'
#' Version: 0.2.2-9000
#' License: CC BY-SA 4.0
#' Source code: https://github.com/ucsf-wynton/wynton-tools
#'
#' Authors:
#' * Stefan Tauner (POSIX version)
#' * Henrik Bengtsson (expanded on Gilles implementation [2])
#' * StackExchange user 'Gilles'
#'   <https://stackexchange.com/users/164368/>
#' * StackExchange user 'gioele'
#'   <https://unix.stackexchange.com/users/14861/>
#'
#' References:
#' [1] https://www.wikipedia.org/wiki/X86-64#Microarchitecture_levels
#' [2] https://unix.stackexchange.com/a/631320

#---------------------------------------------------------------------
# CLI functions
#---------------------------------------------------------------------
help() {
    <"$0" sed -ne "s/^#' \?//p"
}

version() {
    <"$0" sed -ne "/^#' Version:/{ s/.* //p;q }"
}


#---------------------------------------------------------------------
# CPU functions
#---------------------------------------------------------------------
data=
read_input() {
        [ -z "${data}" ] || return 0
        if ${stdin}; then
            data=$(cat)
        else
            data=$(cat /proc/cpuinfo)
        fi
        if [ -z "${data}" ]; then
            >&2 printf '%s\n' "ERROR: Input data is empty"
            exit 1
        fi
}

get_cpu_name() {
    printf '%s\n' "${data}" |
        sed -ne '/^model name[[:space:]]*:/{ s/^model name[[:space:]]*:[[:space:]]*//p;q }'
}


get_cpu_flags() {
    flags=$(printf '%s\n' "${data}" |
        sed -ne '/^flags[[:space:]]*:/{ s/^flags[[:space:]]*:[[:space:]]*//p;q }')
    case $flags in
        (*[!a-z0-9_\ ]*)
            >&2 printf '%s\n' "ERROR: Cannot reliably infer the CPU x86-64 level: only a-z, 0-9, and '_' expected in CPU flags; got: '${flags}'"
            exit 1
            ;;
        ('')
            >&2 printf '%s\n' "ERROR: No CPU 'flags' entry in the input data"
            exit 1
            ;;
    esac
}


has_cpu_flags() {
    for flag; do
        ## Note, it's important to keep a trailing space
        case " ${flags} " in
            (*" ${flag} "*)
                :
                ;;
            (*)
                if ${verbose}; then
                    msg="Identified x86-64-v${level}, because x86-64-v$((level + 1)) requires '${flag}', which is not supported by this CPU"
                    msg="${msg}${cpu_name:+ [${cpu_name}]}"
                    >&2 printf '%s\n' "${msg}"
                fi
                return 1
                ;;
        esac
    done
}


level=0

determine_cpu_version() {
    ## x86-64-v0 (can this happen?)
    level=0

    ## x86-64-v1
    has_cpu_flags lm cmov cx8 fpu fxsr mmx syscall sse2 || return 0
    level=1

    ## x86-64-v2
    has_cpu_flags cx16 lahf_lm popcnt sse4_1 sse4_2 ssse3 || return 0
    level=2

    ## x86-64-v3
    has_cpu_flags avx avx2 bmi1 bmi2 f16c fma abm movbe xsave || return 0
    level=3

    ## x86-64-v4
    has_cpu_flags avx512f avx512bw avx512cd avx512dq avx512vl || return 0
    level=4
}


#---------------------------------------------------------------------
# MAIN
#---------------------------------------------------------------------
verbose=false
stdin=false
assert=

# Parse command-line options
while [ $# -gt 0 ]; do
    case $1 in
    ## Options (--flags):
        (--help)
            help
            exit 0;;
        (--version)
            version
            exit 0;;
        (--verbose)
            verbose=true;;
        (-)
            stdin=true;;
    ## Options (--key=value):
        (--*=*)
            pair=${1#--}
            key=${pair%%=*}
            value=${pair#*=}
            if [ -z "${value}" ]; then
                >&2 printf '%s\n' "ERROR: Option '--${key}' must not be empty"
                exit 2
            fi
            if [ "${key}" = "assert" ]; then
                case $value in ('' | *[!0-9-]*)
                    >&2 printf '%s\n' "ERROR: Option --assert does not specify an integer: ${value}"
                    exit 2
                esac
                if [ "${value}" -lt 1 ] || [ "${value}" -gt 4 ]; then
                    >&2 printf '%s\n' "ERROR: Option --assert is out of range [1,4]: ${value}"
                    exit 2
                fi
                assert=${value}
            else
                >&2 printf '%s\n' "ERROR: Unknown option: $key"
                exit 2
            fi
            ;;
        (*)
            >&2 printf '%s\n' "ERROR: Unknown option: $1"
            exit 2;;
    esac
    shift
done

read_input
get_cpu_flags
determine_cpu_version
cpu_name=$(get_cpu_name)

if [ -n "${assert}" ]; then
    if [ "${level}" -lt "${assert}" ]; then
        >&2 printf '%s\n' "The CPU${cpu_name:+ [${cpu_name}]} on this host ('$(hostname)') supports x86-64-v${level}, which is less than the required x86-64-v${assert}"
        exit 1
    fi
else
    printf '%s\n' "${level}"
fi
